name: CI

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and export Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        target: development
        push: false
        tags: wandr-backend:dev
        outputs: type=docker,dest=/tmp/wandr-backend.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: wandr-backend-image
        path: /tmp/wandr-backend.tar
        retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: wandr_test_db
          POSTGRES_USER: wandr_user
          POSTGRES_PASSWORD: wandr_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: wandr-backend-image
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/wandr-backend.tar

    - name: Run database migrations
      run: |
        docker run --rm \
          --network host \
          -e DATABASE_URL=postgresql+asyncpg://wandr_user:wandr_password@localhost:5432/wandr_test_db \
          wandr-backend:dev \
          alembic upgrade head

    - name: Run tests with coverage
      run: |
        docker run --rm --name test-container \
          --network host \
          -e DATABASE_URL=sqlite+aiosqlite:///:memory: \
          -e REDIS_URL=redis://localhost:6379/1 \
          -e SECRET_KEY=test-secret-key \
          -e DEBUG=true \
          wandr-backend:dev \
          python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing || true

    - name: Extract coverage report
      run: |
        # Create a named container that doesn't auto-remove to extract files
        CONTAINER_ID=$(docker run -d \
          --network host \
          -e DATABASE_URL=sqlite+aiosqlite:///:memory: \
          -e REDIS_URL=redis://localhost:6379/1 \
          -e SECRET_KEY=test-secret-key \
          -e DEBUG=true \
          wandr-backend:dev \
          sh -c "python -m pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing && sleep 5")
        docker wait $CONTAINER_ID
        docker cp $CONTAINER_ID:/app/coverage.xml . || echo "No coverage file found"
        docker rm $CONTAINER_ID

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Docker image artifact
      uses: actions/download-artifact@v4
      with:
        name: wandr-backend-image
        path: /tmp

    - name: Load Docker image
      run: docker load --input /tmp/wandr-backend.tar

    - name: Run formatting check
      run: |
        docker run --rm \
          wandr-backend:dev \
          ruff format --check --no-cache .

    - name: Run linting
      run: |
        docker run --rm \
          wandr-backend:dev \
          ruff check --no-cache .

    - name: Run type checking
      run: |
        docker run --rm \
          wandr-backend:dev \
          mypy .

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"
