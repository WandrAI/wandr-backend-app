[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wandr-backend-app"
version = "0.1.0"
description = "Backend API services for AI-driven travel recommendations and social collaboration"
authors = [{name = "Wandr Team"}]
readme = "README.md"
requires-python = ">=3.11"


[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # flake8-comprehensions
    "C4",
    # flake8-use-pathlib
    "PTH",
    # flake8-pie
    "PIE",
    # flake8-async
    "ASYNC",
    # flake8-bandit (security)
    "S",
    # flake8-return
    "RET",
    # flake8-logging-format
    "G",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    # Ignore try-except-pass and try-except-continue
    "S110",
    "S112",
    # Allow hardcoded passwords in tests
    "S106",
    "S105",
    # Allow assert in tests
    "S101",
    # Allow Depends() in FastAPI function signatures
    "B008",
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*" = ["S101", "PLR2004", "S106", "S105", "S608", "E501", "TID252"]
"alembic/**/*" = ["F401", "E402", "E501", "W291", "PTH120"]

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true
split-on-trailing-comma = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.format]
# Use double quotes for strings
quote-style = "double"
# Use spaces around operators
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Automatically detect the appropriate line ending
line-ending = "auto"
# Enable docstring formatting
docstring-code-format = false
# Exclude same paths as before
exclude = [
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".tox",
    ".venv",
    "_build",
    "buck-out",
    "build",
    "dist",
    "alembic/versions",
]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = false
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_untyped_defs = false
ignore_missing_imports = true
no_implicit_optional = false
show_error_codes = true
strict_equality = false
warn_redundant_casts = false
warn_return_any = false
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = false

[[tool.mypy.overrides]]
module = [
    "alembic.*",
    "tests.*",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = "app.models.*"
disable_error_code = ["arg-type", "assignment"]

[[tool.mypy.overrides]]
module = "app.api.*"
disable_error_code = ["arg-type"]

[[tool.mypy.overrides]]
module = "app.core.exceptions"
disable_error_code = ["arg-type"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
branch = true
omit = [
    "*/tests/*",
    "*/alembic/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
